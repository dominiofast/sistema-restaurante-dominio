-- ü§ñ SCRIPT COMPLETO: Sistema de Configura√ß√£o Autom√°tica do Agente IA
-- Data: 2025-01-27
-- Execute este script no SQL Editor do Supabase

-- ==============================================
-- 1. CRIAR TABELA AI_AGENTS_CONFIG
-- ==============================================

-- Criar tabela ai_agents_config se n√£o existir
CREATE TABLE IF NOT EXISTS ai_agents_config (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    company_name VARCHAR(255),
    cardapio_url TEXT,
    knowledge_base TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    
    -- Garantir que cada empresa tenha apenas uma configura√ß√£o
    UNIQUE(company_id)
);

-- √çndices para performance
CREATE INDEX IF NOT EXISTS idx_ai_agents_config_company_id ON ai_agents_config(company_id);
CREATE INDEX IF NOT EXISTS idx_ai_agents_config_active ON ai_agents_config(is_active);

-- Trigger para atualizar updated_at
CREATE OR REPLACE FUNCTION trigger_set_timestamp_ai_agents_config()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Aplicar trigger se n√£o existir
DROP TRIGGER IF EXISTS set_timestamp_ai_agents_config ON ai_agents_config;
CREATE TRIGGER set_timestamp_ai_agents_config
    BEFORE UPDATE ON ai_agents_config
    FOR EACH ROW
    EXECUTE FUNCTION trigger_set_timestamp_ai_agents_config();

-- ==============================================
-- 2. ADICIONAR CAMPO SLUG √ÄS EMPRESAS
-- ==============================================

-- Adicionar coluna slug se n√£o existir
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'companies' 
        AND column_name = 'slug'
    ) THEN
        ALTER TABLE companies ADD COLUMN slug VARCHAR(100) UNIQUE;
    END IF;
END $$;

-- Criar √≠ndice para performance
CREATE INDEX IF NOT EXISTS idx_companies_slug ON companies(slug);

-- Fun√ß√£o para gerar slug √∫nico
CREATE OR REPLACE FUNCTION generate_company_slug(company_name TEXT)
RETURNS TEXT AS $$
DECLARE
    base_slug TEXT;
    final_slug TEXT;
    counter INTEGER := 1;
BEGIN
    -- Converter nome para slug
    base_slug := lower(company_name);
    base_slug := regexp_replace(base_slug, '[√†√°√¢√£√§√•]', 'a', 'g');
    base_slug := regexp_replace(base_slug, '[√®√©√™√´]', 'e', 'g');
    base_slug := regexp_replace(base_slug, '[√¨√≠√Æ√Ø]', 'i', 'g');
    base_slug := regexp_replace(base_slug, '[√≤√≥√¥√µ√∂√∏]', 'o', 'g');
    base_slug := regexp_replace(base_slug, '[√π√∫√ª√º]', 'u', 'g');
    base_slug := regexp_replace(base_slug, '[√ß]', 'c', 'g');
    base_slug := regexp_replace(base_slug, '[^a-z0-9\s-]', '', 'g');
    base_slug := regexp_replace(base_slug, '\s+', '-', 'g');
    base_slug := regexp_replace(base_slug, '-+', '-', 'g');
    base_slug := trim(both '-' from base_slug);
    
    final_slug := base_slug;
    
    -- Garantir unicidade
    WHILE EXISTS (SELECT 1 FROM companies WHERE slug = final_slug) LOOP
        final_slug := base_slug || '-' || counter;
        counter := counter + 1;
    END LOOP;
    
    RETURN final_slug;
END;
$$ LANGUAGE plpgsql;

-- Popular slugs para empresas existentes
DO $$
DECLARE
    company_record RECORD;
BEGIN
    FOR company_record IN 
        SELECT id, name FROM companies 
        WHERE slug IS NULL OR slug = ''
    LOOP
        UPDATE companies 
        SET slug = generate_company_slug(company_record.name)
        WHERE id = company_record.id;
    END LOOP;
END $$;

-- Trigger para gerar slug automaticamente
CREATE OR REPLACE FUNCTION trigger_generate_company_slug()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.slug IS NULL OR NEW.slug = '' THEN
        NEW.slug := generate_company_slug(NEW.name);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_companies_generate_slug ON companies;
CREATE TRIGGER trigger_companies_generate_slug
    BEFORE INSERT OR UPDATE ON companies
    FOR EACH ROW
    EXECUTE FUNCTION trigger_generate_company_slug();

-- ==============================================
-- 3. CONFIGURAR RLS (ROW LEVEL SECURITY)
-- ==============================================

-- Habilitar RLS na tabela ai_agents_config
ALTER TABLE ai_agents_config ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para permitir acesso baseado na empresa do usu√°rio
CREATE POLICY "Empresas podem gerenciar suas configura√ß√µes de agente IA"
ON ai_agents_config
FOR ALL
USING (
    EXISTS (
        SELECT 1 FROM companies c
        WHERE c.id = ai_agents_config.company_id
        AND (
            -- Super admin pode ver todas as configura√ß√µes
            auth.jwt() ->> 'user_metadata' ->> 'role' = 'super_admin'
            OR
            -- Usu√°rio da empresa pode ver configura√ß√µes da sua empresa
            auth.jwt() ->> 'user_metadata' ->> 'company_domain' = c.domain
        )
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1 FROM companies c
        WHERE c.id = ai_agents_config.company_id
        AND (
            -- Super admin pode criar/editar todas as configura√ß√µes
            auth.jwt() ->> 'user_metadata' ->> 'role' = 'super_admin'
            OR
            -- Usu√°rio da empresa pode criar/editar configura√ß√µes da sua empresa
            auth.jwt() ->> 'user_metadata' ->> 'company_domain' = c.domain
        )
    )
);

-- ==============================================
-- 4. COMENT√ÅRIOS EXPLICATIVOS
-- ==============================================

COMMENT ON TABLE ai_agents_config IS 'Configura√ß√µes autom√°ticas dos agentes IA por empresa';
COMMENT ON COLUMN ai_agents_config.company_id IS 'ID da empresa propriet√°ria do agente IA';
COMMENT ON COLUMN ai_agents_config.cardapio_url IS 'URL personalizada do card√°pio da empresa';
COMMENT ON COLUMN ai_agents_config.knowledge_base IS 'Base de conhecimento gerada automaticamente com produtos e informa√ß√µes da empresa';
COMMENT ON COLUMN ai_agents_config.is_active IS 'Se a configura√ß√£o est√° ativa e deve ser usada pelo agente';

COMMENT ON COLUMN companies.slug IS 'Slug √∫nico da empresa para URLs personalizadas';

-- ==============================================
-- 5. VERIFICA√á√ÉO FINAL
-- ==============================================

DO $$
BEGIN
    -- Verificar se as tabelas foram criadas
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'ai_agents_config') THEN
        RAISE NOTICE '‚úÖ Tabela ai_agents_config criada com sucesso';
    ELSE
        RAISE EXCEPTION '‚ùå Erro: Tabela ai_agents_config n√£o foi criada';
    END IF;
    
    -- Verificar se o campo slug existe
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'companies' AND column_name = 'slug') THEN
        RAISE NOTICE '‚úÖ Campo slug adicionado √†s empresas com sucesso';
    ELSE
        RAISE EXCEPTION '‚ùå Erro: Campo slug n√£o foi adicionado';
    END IF;
    
    -- Mostrar estat√≠sticas
    RAISE NOTICE 'üìä Empresas com slug: %', (SELECT COUNT(*) FROM companies WHERE slug IS NOT NULL);
    RAISE NOTICE 'ü§ñ Configura√ß√µes de agente existentes: %', (SELECT COUNT(*) FROM ai_agents_config);
    
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ SISTEMA DE CONFIGURA√á√ÉO AUTOM√ÅTICA DO AGENTE IA INSTALADO COM SUCESSO!';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã Pr√≥ximos passos:';
    RAISE NOTICE '1. Acesse: Configura√ß√£o ‚Üí Agente IA ‚Üí aba Recursos';
    RAISE NOTICE '2. Clique em: "Configurar Agente Automaticamente"';
    RAISE NOTICE '3. Confirme a a√ß√£o no modal';
    RAISE NOTICE '4. ‚ú® Seu agente estar√° configurado!';
    RAISE NOTICE '';
    RAISE NOTICE 'üöÄ URLs ser√£o: https://pedido.dominio.tech/[slug-da-empresa]';
END $$; 