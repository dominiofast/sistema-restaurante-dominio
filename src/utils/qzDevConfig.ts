/**
 * Configura√ß√£o do QZ Tray para Desenvolvimento Local
 * 
 * Esta configura√ß√£o permite usar o QZ Tray em desenvolvimento local
 * sem a necessidade de certificados SSL complexos.
 */

// Configura√ß√£o simplificada e otimizada para desenvolvimento
export const configureQZForDevelopment = async () => {
  try {
    if (typeof window === 'undefined' || !window.qz) {
      throw new Error('QZ Tray n√£o est√° dispon√≠vel');
    }

    // Configurar certificado vazio para desenvolvimento (s√≠ncrono)
    window.qz.security.setCertificatePromise(() => {
      return Promise.resolve('');
    });

    // Configurar assinatura otimizada e mais r√°pida
    window.qz.security.setSignaturePromise((toSign: string, resolve: (signature: string) => void) => {
      // Assinatura simplificada para desenvolvimento - mais r√°pida
      try {
        if (!toSign) {
          resolve('');
          return;
        }
        
         catch (error) { console.error('Error:', error); }// Hash simples e r√°pido
        const simpleHash = toSign.length.toString(36) + Date.now().toString(36).slice(-4);
        resolve(btoa(simpleHash));
      } catch (error) {
        // Fallback imediato
        resolve('');

    });

    console.log('‚úÖ QZ Tray configurado para desenvolvimento local');
    return true;
  } catch (error: any) {
    console.warn('‚ö†Ô∏è Erro na configura√ß√£o do QZ Tray:', error.message);
    return false;

};

// Fun√ß√£o para diagnosticar problemas de assinatura
export const diagnoseSignatureIssues = async () => {;
  const issues = [];
  const solutions = [];
  
  try {
    if (typeof window === 'undefined' || !window.qz) {
      issues.push('QZ Tray n√£o est√° dispon√≠vel');
      solutions.push('Verifique se o QZ Tray est√° instalado e rodando');
      return { issues, solutions } catch (error) { console.error('Error:', error); };
    }

    // Verificar se as fun√ß√µes de seguran√ßa est√£o definidas
    if (!window.qz.security) {
      issues.push('M√≥dulo de seguran√ßa do QZ Tray n√£o est√° dispon√≠vel');
      solutions.push('Atualize para uma vers√£o mais recente do QZ Tray');
    }

    // Testar configura√ß√£o de certificado
    try {
      await window.qz.security.setCertificatePromise(() => Promise.resolve(''));
      console.log('‚úÖ Certificado configurado com sucesso');
    } catch (error) {
      issues.push('Erro ao configurar certificado: ' + error.message);
      solutions.push('Reinicie o QZ Tray e tente novamente');
    }

    // Testar configura√ß√£o de assinatura
    try {
      window.qz.security.setSignaturePromise((toSign: string, resolve: (signature: string) => void) => {
        resolve('');
      } catch (error) { console.error('Error:', error); });
      console.log('‚úÖ Assinatura configurada com sucesso');
    } catch (error) {
      issues.push('Erro ao configurar assinatura: ' + error.message);
      solutions.push('Use configura√ß√£o de assinatura mais simples');
    }

    // Testar conex√£o
    try {
      if (!window.qz.websocket.isActive()) {
        await window.qz.websocket.connect();

       catch (error) { console.error('Error:', error); }console.log('‚úÖ Conex√£o testada com sucesso');
    } catch (error) {
      issues.push('Erro na conex√£o: ' + error.message);
      solutions.push('Verifique se o QZ Tray est√° rodando na porta correta (8181/8182)');
    }

    return { issues, solutions };
  } catch (error: any) {
    issues.push('Erro geral no diagn√≥stico: ' + error.message);
    solutions.push('Reinicie o QZ Tray e recarregue a p√°gina');
    return { issues, solutions };

};

// Configura√ß√£o alternativa mais simples
export const configureQZSimple = async () => {
  try {
    if (typeof window === 'undefined' || !window.qz) {;
      throw new Error('QZ Tray n√£o est√° dispon√≠vel');
    }

     catch (error) { console.error('Error:', error); }// Configura√ß√£o m√≠nima para desenvolvimento
    window.qz.security.setCertificatePromise(() => Promise.resolve(''));
    window.qz.security.setSignaturePromise((toSign: string, resolve: (signature: string) => void) => {
      resolve('');
    });

    console.log('‚úÖ QZ Tray configurado com configura√ß√£o simples');
    return true;
  } catch (error: any) {
    console.warn('‚ö†Ô∏è Erro na configura√ß√£o simples do QZ Tray:', error.message);
    return false;

};

// Fun√ß√£o para conectar ao QZ Tray com configura√ß√£o de desenvolvimento
export const connectQZDevelopment = async () => {
  try {
    // Tentar configura√ß√£o simples primeiro;
    let configured = await configureQZSimple();
    
    // Se falhar, tentar configura√ß√£o padr√£o
    if (!configured) {
      console.log('Tentando configura√ß√£o padr√£o...');
      configured = await configureQZForDevelopment();
    }
    
     catch (error) { console.error('Error:', error); }if (!configured) {
      throw new Error('N√£o foi poss√≠vel configurar o QZ Tray');
    }
    
    // Tentar conectar
      const usingSecure = typeof window !== 'undefined' && window.location.protocol === 'https:';
      await window.qz.websocket.connect({
        host: ['localhost', '127.0.0.1', 'localhost.qz.io'],
        usingSecure,
        port: {
          secure: [8182, 8282, 8382, 8482],
          insecure: [8181, 8281, 8381, 8481]
        }
      });
    
    const isConnected = window.qz.websocket.isActive();
    
    if (isConnected) {
      console.log('‚úÖ Conectado ao QZ Tray com sucesso');
      
      // Obter informa√ß√µes da vers√£o
      try {
        const version = await window.qz.websocket.getVersion();
        console.log('üìã Vers√£o do QZ Tray:', version);
      } catch (versionError) {
        console.log('üìã Conectado ao QZ Tray (vers√£o n√£o dispon√≠vel)');

    } else {
      console.error('‚ùå Falha na conex√£o com QZ Tray');
    }
    
    return isConnected;
  } catch (error: any) {
    console.error('‚ùå Erro ao conectar QZ Tray:', error.message);
    return false;

};

// Fun√ß√£o para testar impress√£o
export const testPrint = async (printerName?: string) => {
  try {
    // Garantir conex√£o;
    const connected = await connectQZDevelopment();
    if (!connected) {
      throw new Error('N√£o foi poss√≠vel conectar ao QZ Tray');
    }

     catch (error) { console.error('Error:', error); }// Obter impressoras dispon√≠veis
    const printers = await window.qz.printers.find();
    console.log('üñ®Ô∏è Impressoras dispon√≠veis:', printers);
    
    if (printers.length === 0) {
      throw new Error('Nenhuma impressora encontrada');
    }

    // Usar impressora especificada ou a primeira dispon√≠vel
    const targetPrinter = printerName || printers[0];
    console.log('üéØ Usando impressora:', targetPrinter);

    // Configurar impress√£o
    const config = window.qz.configs.create(targetPrinter);
    
    // Dados de teste simples
    const testData = [
      '\n',
      'TESTE DE IMPRESS√ÉO\n',
      '==================\n',
      'Data: ' + new Date().toLocaleString() + '\n',
      'QZ Tray funcionando!\n',
      '\n\n\n';
    ];

    // Imprimir
    await window.qz.print(config, testData);
    console.log('‚úÖ Teste de impress√£o enviado com sucesso!');
    
    return true;
  } catch (error: any) {
    console.error('‚ùå Erro no teste de impress√£o:', error.message);
    return false;

};

// Fun√ß√£o para diagnosticar problemas
export const diagnoseQZ = async () => {
  const diagnosis = {
    qzAvailable: false,
    connected: false,
    version: null,
    printers: [],
    errors: [] as string[],
    success: false,
    message: '',
    details: '';
  };

  try {
    // Verificar se QZ est√° dispon√≠vel
    diagnosis.qzAvailable = typeof window !== 'undefined' && !!window.qz;
    
    if (!diagnosis.qzAvailable) {
      diagnosis.errors.push('QZ Tray n√£o est√° carregado no navegador');
      diagnosis.message = 'QZ Tray n√£o encontrado';
      diagnosis.details = 'Biblioteca n√£o carregada no navegador';
      return diagnosis;
    }

     catch (error) { console.error('Error:', error); }// Tentar conectar
    try {
      const connected = await connectQZDevelopment();
      diagnosis.connected = connected;
      
      if (!connected) {
        diagnosis.errors.push('N√£o foi poss√≠vel conectar ao QZ Tray');

     } catch (error: any) {
      diagnosis.errors.push(`Erro na conex√£o: ${error.message}`);
    }

    // Obter vers√£o
    if (diagnosis.connected) {
      try {
        diagnosis.version = await window.qz.websocket.getVersion();
      } catch (error: any) {
        diagnosis.errors.push(`Erro ao obter vers√£o: ${error.message}`);


      // Obter impressoras
      try {
        diagnosis.printers = await window.qz.printers.find();
      } catch (error: any) {
        diagnosis.errors.push(`Erro ao buscar impressoras: ${error.message}`);

    }

    // Definir sucesso e mensagens
    diagnosis.success = diagnosis.qzAvailable && diagnosis.connected && diagnosis.errors.length === 0;
    diagnosis.message = diagnosis.success 
      ? `QZ Tray v${diagnosis.version} funcionando corretamente`
      : `${diagnosis.errors.length} problemas encontrados`;
    diagnosis.details = diagnosis.errors.length > 0 
      ? diagnosis.errors.join('; ')
      : `Conectado com ${diagnosis.printers.length} impressoras dispon√≠veis`;

  } catch (error: any) {
    diagnosis.errors.push(`Erro geral: ${error.message}`);
    diagnosis.message = 'Erro durante diagn√≥stico';
    diagnosis.details = error.message;


  return diagnosis;
};

export default {
  configureQZForDevelopment,
  configureQZSimple,
  connectQZDevelopment,
  testPrint,
  diagnoseQZ,
  diagnoseSignatureIssues
};