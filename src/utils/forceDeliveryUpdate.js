// Fun√ß√£o para for√ßar atualiza√ß√£o das configura√ß√µes de entrega
window.forceDeliveryUpdate = async (companyId) => {
  try {
    console.log(`üîÑ For√ßando atualiza√ß√£o para company: ${companyId}`);
    
    const { deliveryOptionsService } = await import('../services/deliveryOptionsService');
    
    // Limpar cache
    deliveryOptionsService.invalidateCache(companyId);
    deliveryOptionsService.clearCache();
    
    console.log('‚úÖ Cache limpo com sucesso');
    
    // Buscar novamente
    const newOptions = await deliveryOptionsService.getDeliveryOptions(companyId);
    console.log('‚úÖ Novas op√ß√µes carregadas:', newOptions);
    
    // Recarregar a p√°gina para aplicar as mudan√ßas
    window.location.reload();
    
  } catch (error) {
    console.error('‚ùå Erro ao for√ßar atualiza√ß√£o:', error);
  }
};

// Fun√ß√£o espec√≠fica para limpar cache da Dom√≠nio Pizzas
window.clearDominioCache = async () => {
  try {
    console.log(`üóëÔ∏è Limpando cache espec√≠fico da Dom√≠nio Pizzas`);
    
    const { deliveryOptionsService } = await import('../services/deliveryOptionsService');
    
    // Limpar cache espec√≠fico
    deliveryOptionsService.clearDominioCache();
    deliveryOptionsService.invalidateCache('550e8400-e29b-41d4-a716-446655440001');
    
    console.log('‚úÖ Cache da Dom√≠nio Pizzas limpo');
    
    // Buscar novamente
    const newOptions = await deliveryOptionsService.getDeliveryOptions('550e8400-e29b-41d4-a716-446655440001');
    console.log('‚úÖ Novas op√ß√µes Dom√≠nio Pizzas carregadas:', newOptions);
    
    // Recarregar a p√°gina
    window.location.reload();
    
  } catch (error) {
    console.error('‚ùå Erro ao limpar cache Dom√≠nio:', error);
  }
};

console.log('üîß Fun√ß√µes de debug carregadas: forceDeliveryUpdate(companyId) e clearDominioCache()');