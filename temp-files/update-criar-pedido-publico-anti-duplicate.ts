// ATUALIZA√á√ÉO DA EDGE FUNCTION CRIAR-PEDIDO-PUBLICO
// Integrar a fun√ß√£o RPC anti-duplica√ß√£o para prevenir duplicatas

// Substituir a se√ß√£o de verifica√ß√£o anti-duplica√ß√£o existente (linhas ~90-130)
// pela vers√£o melhorada abaixo:

/*
// VERIFICA√á√ÉO ANTI-DUPLICA√á√ÉO MELHORADA usando RPC
let pixPaymentId = null;
try {
  const parsedPayment = JSON.parse(pedidoData.pagamento);
  if (parsedPayment.method === 'pix' && parsedPayment.id) {
    pixPaymentId = parsedPayment.id;
  }
} catch {
  // Se n√£o conseguir fazer parse, continuar normalmente
}

console.log('üîç Verifica√ß√£o anti-duplica√ß√£o avan√ßada:', {
  pixPaymentId,
  telefone: pedidoData.cliente.telefone,
  total: pedidoData.total
});

// Usar a fun√ß√£o RPC para verifica√ß√£o mais robusta
const { data: duplicateCheck, error: duplicateError } = await supabase
  .rpc('rpc_check_existing_order', {
    p_company_id: pedidoData.companyId,
    p_payment_id: pixPaymentId,
    p_customer_phone: pedidoData.cliente.telefone,
    p_amount: pedidoData.total
  });

if (duplicateError) {
  console.error('‚ùå Erro na verifica√ß√£o anti-duplica√ß√£o:', duplicateError);
  // Continuar com cria√ß√£o do pedido se houver erro na verifica√ß√£o
} else if (duplicateCheck?.has_duplicates) {
  console.log('‚ö†Ô∏è DUPLICA√á√ÉO DETECTADA E PREVENIDA:', duplicateCheck);
  const existingOrder = duplicateCheck.existing_orders[0];
  
  // Log adicional da preven√ß√£o
  await supabase
    .from('ai_conversation_logs')
    .insert({
      company_id: pedidoData.companyId,
      customer_phone: pedidoData.cliente.telefone,
      customer_name: pedidoData.cliente.nome,
      message_content: `DUPLICA√á√ÉO PREVENIDA: Tentativa de criar pedido duplicado. Pedido existente: ${existingOrder.id} (${existingOrder.numero_pedido}). Payment ID: ${pixPaymentId || 'N/A'}`,
      message_type: 'duplicate_prevention_success',
      created_at: new Date().toISOString()
    });
  
  return new Response(
    JSON.stringify({
      success: true,
      pedido_id: existingOrder.id,
      numero_pedido: existingOrder.numero_pedido,
      message: 'Pedido j√° existe - duplica√ß√£o prevenida com sucesso',
      duplicate_prevented: true,
      duplicate_details: {
        existing_order: existingOrder,
        check_result: duplicateCheck,
        prevention_timestamp: new Date().toISOString()
      }
    }),
    { 
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    }
  );
} else {
  console.log('‚úÖ Nenhuma duplica√ß√£o detectada, prosseguindo com cria√ß√£o do pedido');
}
*/

// INSTRU√á√ïES PARA APLICAR A CORRE√á√ÉO:
// 1. Execute o script integrate-anti-duplicate-function.sql no Supabase
// 2. Substitua a se√ß√£o de verifica√ß√£o anti-duplica√ß√£o na edge function
// 3. Teste com novos pedidos "Vangleiza"

// LOCALIZA√á√ÉO DA ALTERA√á√ÉO:
// Arquivo: supabase/functions/criar-pedido-publico/index.ts
// Linhas: ~90-130 (se√ß√£o "VERIFICA√á√ÉO ANTI-DUPLICA√á√ÉO")

// BENEF√çCIOS DA NOVA IMPLEMENTA√á√ÉO:
// - Verifica√ß√£o mais robusta com m√∫ltiplos crit√©rios
// - Logs detalhados de preven√ß√£o
// - Retorno de informa√ß√µes sobre pedidos existentes
// - Melhor tratamento de erros
// - Funciona para todos os tipos de pagamento, n√£o s√≥ PIX

console.log('üìù Instru√ß√µes de atualiza√ß√£o criadas para criar-pedido-publico');
console.log('üîß Execute integrate-anti-duplicate-function.sql primeiro');
console.log('‚úèÔ∏è Depois substitua o c√≥digo na edge function conforme coment√°rios acima');