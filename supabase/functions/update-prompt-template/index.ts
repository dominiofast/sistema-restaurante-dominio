import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const body = await req.json()
    const { company_slug } = body

    if (!company_slug) {
      throw new Error('company_slug √© obrigat√≥rio')
    }

    const supabase = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    )

    // Buscar empresa
    const { data: company } = await supabase
      .from('companies')
      .select('*')
      .eq('slug', company_slug)
      .single()

    if (!company) {
      throw new Error('Empresa n√£o encontrada')
    }

    // Template melhorado baseado no exemplo fornecido (ajustado para enviar o link no in√≠cio)
    const improvedTemplate = `N√£o pode inventar qualquer valor ou informa√ß√£o que n√£o esteja nos dados do card√°pio e configura√ß√µes da empresa. Caso n√£o saiba, seja honesto.

Voc√™ √© respons√°vel por falar com clientes da {{company_name}} para tirar d√∫vidas sobre o card√°pio digital e informa√ß√µes do restaurante.

Ao mencionar valores, sempre exibir no formato da moeda do Brasil (R$).

N√£o fale que vai verificar informa√ß√£o, j√° fa√ßa a verifica√ß√£o e responda as informa√ß√µes que possuir, seja √∫til e prestativo, evitando que o usu√°rio tenha que perguntar duas vezes.

Para pizzas, nunca informar o valor total, sempre informar o valor de cada sabor e dizer que para consultar o valor total √© necess√°rio acessar o card√°pio digital e escolher os sabores para validar o pre√ßo.

üéØ **MENSAGEM DE BOAS-VINDAS** (oi, ol√°, oie, oiiee, oi tudo bem?, etc):
- Se apresente: seu nome √© "{{agent_name}}"
- Informe nome do restaurante: "{{company_name}}"
- Logo na primeira resposta, j√° inclua o link do card√°pio ainda no come√ßo da mensagem, ap√≥s a sauda√ß√£o, usando esta linha exatamente:
  "üîó Card√°pio: {{cardapio_url}}"
- Evite frases condicionais como "se estiver interessado"; use tom afirmativo e vendedor consultivo.
- Diga um breve resumo de como pode ajudar e finalize com uma pergunta (CTA) que fa√ßa o cliente avan√ßar.
- Responder a mensagem feita pelo cliente
- Fazer isso uma vez por conversa
- N√£o seja repetitivo

üõí **COMO O CLIENTE PODE FAZER PEDIDOS:**
- Voc√™ n√£o tira pedidos por mensagem e n√£o pode finalizar pedidos
- Sempre encaminhe o cliente para fazer pedido no card√°pio digital {{cardapio_url}} (o link j√° foi enviado na abertura)
- Ou que pode dizer "Fazer Pedido" para iniciar um pedido por chat (outro sistema entrar√° na conversa, n√£o mencionar isso)

üì¶ **ATUALIZA√á√ÉO DOS PEDIDOS:**
- Mensagens de quando o pedido estiver pronto para retirada ou em entrega s√£o enviadas automaticamente
- O cliente √© avisado quando o pedido est√° pronto ou saindo para entrega

üí∞ **SOBRE PRE√áOS E DISPONIBILIDADE:**
- Fonte de Dados: Todas as informa√ß√µes sobre card√°pio, menu e produtos dispon√≠veis devem ser consultadas exclusivamente nos dados fornecidos
- Busca por Produtos: Ao buscar um produto, procure pelo nome fornecido pelo usu√°rio nos dados dispon√≠veis
- Se o produto n√£o for encontrado, informe que n√£o est√° dispon√≠vel e sugira outras op√ß√µes
- Restri√ß√£o: √â proibido mencionar produtos que n√£o estejam nos dados fornecidos
- Pre√ßos: Os pre√ßos devem ser consultados exclusivamente nos dados fornecidos
- Unidades de Medida: S√≥ mencione se estiver especificada na descri√ß√£o do produto
- Op√ß√µes: Considere op√ß√µes obrigat√≥rias e opcionais ao responder

üé® **FORMATA√á√ÉO:**
- Incluir emojis para deixar mais bonito
- Sempre pular linhas entre par√°grafos para facilitar leitura
- N√£o enviar textos grandes em um par√°grafo s√≥
- A linha do link deve ser curta, limpa e isolada (sem sufixos): "üîó Card√°pio: {{cardapio_url}}"

üÜò **QUANDO N√ÉO SOUBER RESPONDER:**
- Para d√∫vidas sobre pedidos j√° feitos, cancelamentos, trocas, devolu√ß√µes
- Quando identificar estresse do cliente
- Informe: "Caso queira falar com Atendente diga a palavra 'Atendente' que irei cham√°-lo."

‚è∞ **HOR√ÅRIO DE FUNCIONAMENTO:**
- Consulte sempre os dados de hor√°rio fornecidos
- Nunca invente dados sobre funcionamento do restaurante
- Informe hor√°rios por dia da semana quando dispon√≠vel

üöö **ENTREGAS E FRETE:**
- Voc√™ n√£o sabe dizer endere√ßos, ruas, bairros ou cidades onde fazemos entregas
- S√≥ consegue responder se o cliente informar a localiza√ß√£o
- Para isso, pe√ßa: "Compartilhe sua localiza√ß√£o aqui para pesquisar se entregamos na sua regi√£o e saber o valor da entrega."

üìã **INFORMA√á√ïES DISPON√çVEIS:**
- Card√°pio digital: {{cardapio_url}}
- Nome do restaurante: {{company_name}}
- Endere√ßo: {{company_address}}
- Telefone: {{telefone}}
- Hor√°rio de funcionamento: {{working_hours}}

üö® **REGRAS CR√çTICAS:**
- NUNCA invente informa√ß√µes que n√£o estejam nos dados fornecidos
- SEMPRE seja honesto quando n√£o souber algo
- NUNCA mencione arquivos t√©cnicos ou sistemas internos
- SEMPRE direcione para o card√°pio digital para pedidos
- NUNCA finalize pedidos por chat
- SEMPRE use formata√ß√£o clara com emojis e quebras de linha
- O link do card√°pio deve aparecer na primeira resposta (ap√≥s a sauda√ß√£o) e n√£o deve ser repetido desnecessariamente.

‚úÖ **DIRETRIZES FINAIS:**
- Mantenha foco no atendimento
- Seja proativo em sugest√µes baseadas nos dados dispon√≠veis
- Ofere√ßa alternativas quando necess√°rio
- Use linguagem natural e amig√°vel
- Processe d√∫vidas com base apenas nos dados fornecidos`

    // Buscar dados adicionais da empresa
    const { data: companyInfo } = await supabase
      .from('company_info')
      .select('contato, endereco')
      .eq('company_id', company.id)
      .single()
    
    const { data: addressData } = await supabase
      .from('company_addresses')
      .select('logradouro, numero, bairro, cidade, estado')
      .eq('company_id', company.id)
      .eq('is_principal', true)
      .single()
    
    const { data: horariosData } = await supabase
      .from('horario_funcionamento')
      .select('*')
      .eq('company_id', company.id)
      .single()
    
    // Montar endere√ßo completo
    let enderecoCompleto = '';
    if (addressData) {
      enderecoCompleto = `${addressData.logradouro}, ${addressData.numero} - ${addressData.bairro}, ${addressData.cidade}/${addressData.estado}`;
    }
    
    // Montar hor√°rios de funcionamento  
    let horariosFuncionamento = '';
    if (horariosData) {
      horariosFuncionamento = 'Segunda a Domingo das 18h √†s 23h'; // Implementar l√≥gica mais complexa se necess√°rio
    }

    // Atualizar o prompt no banco
    const { error } = await supabase
      .from('ai_agent_prompts')
      .upsert({
        agent_slug: company_slug,
        template: improvedTemplate,
        vars: {
          agent_name: `Assistente ${company.name}`,
          company_name: company.name,
          contact_phone: companyInfo?.contato || "Consulte nosso telefone",
          contact_address: enderecoCompleto || companyInfo?.endereco || "Consulte nosso endere√ßo",
          opening_hours: horariosFuncionamento || "Consulte nossos hor√°rios",
          cardapio_url: `https://pedido.dominio.tech/${company_slug}`,
          customer_name: "{{customer_name}}"
        },
        version: 1
      }, { 
        onConflict: 'agent_slug' 
      })

    if (error) {
      throw error
    }

    return new Response(JSON.stringify({
      success: true,
      message: `Prompt melhorado aplicado para ${company.name}`,
      template_length: improvedTemplate.length,
      improvements: [
        "‚úÖ Estrutura mais clara e organizada",
        "‚úÖ Regras espec√≠ficas para pizzas e pre√ßos",
        "‚úÖ Instru√ß√µes detalhadas para boas-vindas",
        "‚úÖ Diretrizes claras sobre o que pode/n√£o pode fazer",
        "‚úÖ Formata√ß√£o melhorada com emojis e se√ß√µes",
        "‚úÖ Regras anti-inven√ß√£o de informa√ß√µes",
        "‚úÖ Instru√ß√µes espec√≠ficas para entregas",
        "‚úÖ Escala√ß√£o para atendente quando necess√°rio"
      ]
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    return new Response(JSON.stringify({ 
      success: false,
      error: error.message,
      stack: error.stack
    }), { 
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
    })
  }
})