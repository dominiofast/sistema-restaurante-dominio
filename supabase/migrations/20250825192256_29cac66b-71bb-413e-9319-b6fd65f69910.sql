-- üîß CORRE√á√ÉO ESPEC√çFICA: Fun√ß√µes auxiliares para RLS
-- Data: 2025-01-27

-- ==============================================
-- VERIFICAR E CRIAR FUN√á√ïES AUXILIARES
-- ==============================================

-- Fun√ß√£o para obter company_id do usu√°rio atual
CREATE OR REPLACE FUNCTION get_user_company_id()
RETURNS UUID AS $$
BEGIN
    RETURN (
        SELECT uc.company_id 
        FROM user_companies uc 
        WHERE uc.user_id = auth.uid() 
        AND uc.is_active = true 
        LIMIT 1
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Fun√ß√£o para obter role do usu√°rio atual
CREATE OR REPLACE FUNCTION get_user_role()
RETURNS TEXT AS $$
BEGIN
    RETURN (
        SELECT uc.role 
        FROM user_companies uc 
        WHERE uc.user_id = auth.uid() 
        AND uc.is_active = true 
        LIMIT 1
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- ==============================================
-- RECRIAR POL√çTICA TEMPOR√ÅRIA PERMISSIVA
-- ==============================================

-- Remover pol√≠tica tempor√°ria se existe
DROP POLICY IF EXISTS "temp_permissive_branding" ON cardapio_branding;

-- Criar pol√≠tica tempor√°ria mais permissiva para debug
CREATE POLICY "temp_permissive_branding"
ON cardapio_branding
FOR ALL
TO authenticated
USING (
    auth.uid() IS NOT NULL
)
WITH CHECK (
    auth.uid() IS NOT NULL
);

-- ==============================================
-- VERIFICA√á√ÉO DE DEBUG
-- ==============================================

DO $$
BEGIN
    RAISE NOTICE '‚úÖ Fun√ß√µes auxiliares criadas/atualizadas';
    RAISE NOTICE '‚úÖ Pol√≠tica tempor√°ria permissiva ativada';
    RAISE NOTICE '';
    RAISE NOTICE 'üß™ Teste salvando configura√ß√£o agora.';
    RAISE NOTICE '‚ö†Ô∏è  LEMBRE-SE: Remover pol√≠tica tempor√°ria ap√≥s teste!';
END $$;