// üöÄ CORRE√á√ÉO FINAL DOM√çNIO PIZZAS
// Execute este script no console do navegador na p√°gina da Dom√≠nio Pizzas
// Baseado na an√°lise do hook useRegioesAtendimento

console.log('üöÄ INICIANDO CORRE√á√ÉO FINAL - DOM√çNIO PIZZAS');

// Configura√ß√µes da Dom√≠nio Pizzas
const DOMINIO_CONFIG = {
  company_id: '550e8400-e29b-41d4-a716-446655440001',
  slug: 'dominiopizzas',
  name: 'Dom√≠nio Pizzas'
};

// Fun√ß√£o principal de corre√ß√£o
async function corrigirDominioFinal() {
  console.log('='.repeat(60));
  console.log('üîß CORRE√á√ÉO FINAL - DOM√çNIO PIZZAS');
  console.log('Baseada na solu√ß√£o universal que funciona na 300 Graus');
  console.log('='.repeat(60));
  
  try {
    // 1. Verificar se o Supabase est√° dispon√≠vel
    if (typeof supabase === 'undefined') {
      console.error('‚ùå Supabase n√£o dispon√≠vel! Certifique-se de estar na p√°gina correta.');
      return false;
    }
    console.log('‚úÖ Supabase dispon√≠vel');
    
    // 2. Verificar se a empresa existe
    console.log('\nüìä Verificando empresa Dom√≠nio Pizzas...');
    const { data: company, error: companyError } = await supabase
      .from('companies')
      .select('*')
      .eq('id', DOMINIO_CONFIG.company_id)
      .single();
    
    if (companyError || !company) {
      console.error('‚ùå Empresa Dom√≠nio n√£o encontrada:', companyError);
      return false;
    }
    
    console.log('‚úÖ Empresa encontrada:', {
      id: company.id,
      name: company.name,
      slug: company.slug
    });
    
    // 3. Verificar regi√µes existentes
    console.log('\nüìç Verificando regi√µes existentes...');
    const { data: regioesExistentes, error: regioesError } = await supabase
      .from('regioes_atendimento')
      .select('*')
      .eq('company_id', DOMINIO_CONFIG.company_id);
    
    if (regioesError) {
      console.error('‚ùå Erro ao verificar regi√µes:', regioesError);
    } else {
      console.log(`üìä Regi√µes existentes: ${regioesExistentes?.length || 0}`);
      
      if (regioesExistentes && regioesExistentes.length > 0) {
        console.log('üìã Regi√µes encontradas:');
        regioesExistentes.forEach((regiao, index) => {
          console.log(`  ${index + 1}. ${regiao.nome}`, {
            tipo: regiao.tipo,
            raio_km: regiao.raio_km,
            valor: regiao.valor,
            status: regiao.status ? '‚úÖ Ativa' : '‚ùå Inativa'
          });
        });
      }
    }
    
    // 4. Aplicar a SOLU√á√ÉO UNIVERSAL (igual ao hook)
    console.log('\nüîß Aplicando SOLU√á√ÉO UNIVERSAL...');
    
    // Configura√ß√£o baseada na 300 graus (que FUNCIONA)
    const regiaoUniversal = {
      company_id: DOMINIO_CONFIG.company_id,
      tipo: 'raio',
      nome: `${company.name} - √Årea de Cobertura Universal`,
      cidade: 'Cacoal', // Cidade padr√£o de Cacoal/RO
      estado: 'RO', // Estado padr√£o
      centro_lat: -11.4389, // Coordenadas padr√£o de Cacoal/RO
      centro_lng: -61.4447,
      raio_km: 100, // Raio MUITO maior (100km) para cobrir toda a regi√£o
      valor: 0, // Taxa gratuita para facilitar
      status: true
    };
    
    console.log('üìù Configura√ß√£o da regi√£o universal:', regiaoUniversal);
    
    // 5. Tentar criar a regi√£o no banco
    console.log('\nüíæ Criando regi√£o no banco de dados...');
    const { data: novaRegiao, error: insertError } = await supabase
      .from('regioes_atendimento')
      .insert([regiaoUniversal])
      .select()
      .single();
    
    if (insertError) {
      console.warn('‚ö†Ô∏è Erro ao criar no banco, usando solu√ß√£o em mem√≥ria:', insertError);
      
      // SOLU√á√ÉO DE FALLBACK: Regi√£o em mem√≥ria (como o hook faz)
      const regiaoMemoria = { 
        ...regiaoUniversal, 
        id: 'universal-' + Date.now(),
        raio_km: 150 // Raio ainda maior para garantir cobertura
      };
      
      console.log('‚úÖ Regi√£o em mem√≥ria criada:', regiaoMemoria);
      
      // Simular o que o hook faria
      console.log('üîÑ Simulando comportamento do hook...');
      window.dominioRegiaoMemoria = regiaoMemoria;
      
    } else {
      console.log('‚úÖ Regi√£o criada no banco com sucesso:', novaRegiao);
    }
    
    // 6. Verificar m√©todos de entrega
    console.log('\nüöö Verificando m√©todos de entrega...');
    await verificarMetodosEntrega();
    
    // 7. Testar o c√°lculo de taxa
    console.log('\nüí∞ Testando c√°lculo de taxa...');
    await testarCalculoFinal();
    
    // 8. For√ßar recarregamento se necess√°rio
    console.log('\nüîÑ Finalizando corre√ß√£o...');
    console.log('‚úÖ CORRE√á√ÉO CONCLU√çDA!');
    console.log('üîÑ Recarregando p√°gina em 3 segundos...');
    
    setTimeout(() => {
      console.log('üîÑ Recarregando...');
      window.location.reload();
    }, 3000);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error);
    return false;
  }
}

// Fun√ß√£o para verificar m√©todos de entrega
async function verificarMetodosEntrega() {
  try {
    const { data: methods, error } = await supabase
      .from('delivery_methods')
      .select('*')
      .eq('company_id', DOMINIO_CONFIG.company_id)
      .single();
    
    if (error || !methods) {
      console.warn('‚ö†Ô∏è M√©todos de entrega n√£o configurados, criando...');
      
      const { data: newMethods, error: insertError } = await supabase
        .from('delivery_methods')
        .insert([{
          company_id: DOMINIO_CONFIG.company_id,
          delivery: true,
          pickup: true,
          eat_in: false
        }])
        .select()
        .single();
      
      if (insertError) {
        console.error('‚ùå Erro ao criar m√©todos de entrega:', insertError);
      } else {
        console.log('‚úÖ M√©todos de entrega criados:', newMethods);
      }
    } else {
      console.log('‚úÖ M√©todos de entrega:', {
        delivery: methods.delivery ? '‚úÖ' : '‚ùå',
        pickup: methods.pickup ? '‚úÖ' : '‚ùå',
        eat_in: methods.eat_in ? '‚úÖ' : '‚ùå'
      });
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar m√©todos de entrega:', error);
  }
}

// Fun√ß√£o para testar o c√°lculo final
async function testarCalculoFinal() {
  const enderecoTeste = {
    latitude: -11.4389,
    longitude: -61.4447,
    logradouro: 'Rua Teste, 123',
    cidade: 'Cacoal',
    estado: 'RO'
  };
  
  console.log('üß™ Testando c√°lculo com endere√ßo:', enderecoTeste);
  
  try {
    // Buscar regi√µes ativas
    const { data: regioes, error } = await supabase
      .from('regioes_atendimento')
      .select('*')
      .eq('company_id', DOMINIO_CONFIG.company_id)
      .eq('status', true);
    
    if (error || !regioes || regioes.length === 0) {
      console.warn('‚ö†Ô∏è Nenhuma regi√£o ativa encontrada para teste');
      return;
    }
    
    console.log(`üìä Testando com ${regioes.length} regi√£o(√µes) ativa(s)`);
    
    for (const regiao of regioes) {
      if (regiao.tipo === 'raio' && regiao.centro_lat && regiao.centro_lng) {
        const distancia = calcularDistancia(
          enderecoTeste.latitude,
          enderecoTeste.longitude,
          regiao.centro_lat,
          regiao.centro_lng
        );
        
        const dentroDoRaio = distancia <= regiao.raio_km;
        
        console.log(`üìç Regi√£o: ${regiao.nome}`);
        console.log(`   Dist√¢ncia: ${distancia.toFixed(2)}km`);
        console.log(`   Raio: ${regiao.raio_km}km`);
        console.log(`   Status: ${dentroDoRaio ? '‚úÖ DENTRO' : '‚ùå FORA'}`);
        console.log(`   Taxa: R$ ${regiao.valor}`);
        
        if (dentroDoRaio) {
          console.log(`üéâ SUCESSO! Taxa calculada: R$ ${regiao.valor}`);
          return regiao.valor;
        }
      }
    }
    
    console.warn('‚ö†Ô∏è Endere√ßo fora de todas as √°reas (isso n√£o deveria acontecer com raio de 100km)');
    
  } catch (error) {
    console.error('‚ùå Erro no teste de c√°lculo:', error);
  }
}

// Fun√ß√£o para calcular dist√¢ncia (Haversine)
function calcularDistancia(lat1, lon1, lat2, lon2) {
  const R = 6371; // Raio da Terra em km
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

// Fun√ß√£o de diagn√≥stico r√°pido
async function diagnosticoRapido() {
  console.log('üîç DIAGN√ìSTICO R√ÅPIDO - DOM√çNIO PIZZAS');
  
  try {
    // Verificar empresa
    const { data: company } = await supabase
      .from('companies')
      .select('id, name, slug')
      .eq('id', DOMINIO_CONFIG.company_id)
      .single();
    
    console.log('Empresa:', company ? '‚úÖ Encontrada' : '‚ùå N√£o encontrada');
    
    // Verificar regi√µes
    const { data: regioes } = await supabase
      .from('regioes_atendimento')
      .select('id, nome, status')
      .eq('company_id', DOMINIO_CONFIG.company_id);
    
    console.log(`Regi√µes: ${regioes?.length || 0} encontrada(s)`);
    console.log(`Regi√µes ativas: ${regioes?.filter(r => r.status).length || 0}`);
    
    // Verificar m√©todos
    const { data: methods } = await supabase
      .from('delivery_methods')
      .select('delivery, pickup')
      .eq('company_id', DOMINIO_CONFIG.company_id)
      .single();
    
    console.log('Delivery:', methods?.delivery ? '‚úÖ' : '‚ùå');
    console.log('Pickup:', methods?.pickup ? '‚úÖ' : '‚ùå');
    
    // Diagn√≥stico final
    const temRegioes = regioes && regioes.length > 0 && regioes.some(r => r.status);
    const temMetodos = methods && (methods.delivery || methods.pickup);
    
    if (temRegioes && temMetodos) {
      console.log('üéâ STATUS: ‚úÖ TUDO CONFIGURADO!');
    } else {
      console.log('‚ö†Ô∏è STATUS: ‚ùå PRECISA DE CORRE√á√ÉO');
      console.log('üí° Execute: corrigirDominioFinal()');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico:', error);
  }
}

// Disponibilizar fun√ß√µes globalmente
window.corrigirDominioFinal = corrigirDominioFinal;
window.diagnosticoRapido = diagnosticoRapido;
window.verificarMetodosEntrega = verificarMetodosEntrega;
window.testarCalculoFinal = testarCalculoFinal;

// Executar diagn√≥stico automaticamente
diagnosticoRapido();

console.log('\nüõ†Ô∏è FUN√á√ïES DISPON√çVEIS:');
console.log('- corrigirDominioFinal() - Aplicar corre√ß√£o completa');
console.log('- diagnosticoRapido() - Verificar status atual');
console.log('- verificarMetodosEntrega() - Verificar/criar m√©todos');
console.log('- testarCalculoFinal() - Testar c√°lculo de taxa');

console.log('\nüöÄ Para corrigir o problema, execute: corrigirDominioFinal()');
console.log('‚úÖ Script de corre√ß√£o carregado com sucesso!');